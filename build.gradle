plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}


fabricApi {
    configureDataGeneration {
        client = true
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'BlameJared Maven (CrT / Bookshelf)'
        url = 'https://maven.blamejared.com'

    }
    maven {
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroupByRegex("software.bernie.*")
            includeGroup("com.eliotlash.mclib")
        }
    }
    maven {
        name = "Ladysnake Mods"
        url = 'https://maven.ladysnake.org/releases'
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven { url "https://maven.terraformersmc.com/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
    modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-world:${project.cca_version}"

    include "org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    include "org.ladysnake.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
    include "org.ladysnake.cardinal-components-api:cardinal-components-world:${project.cca_version}"



    modImplementation(api("gg.moonflower:molang-compiler:${molang_compiler_version}"))
    modImplementation(api("io.github.ocelot:glsl-processor:${glsl_processor_version}"))

    modImplementation(api("io.github.spair:imgui-java-binding:$imgui_version"))
    modImplementation(api("io.github.spair:imgui-java-lwjgl3:$imgui_version")) {
        exclude group: 'org.lwjgl'
        exclude group: 'org.lwjgl.lwjgl'
    }

    modImplementation(runtimeOnly("io.github.spair:imgui-java-natives-linux:$imgui_version"))
    modImplementation(runtimeOnly("io.github.spair:imgui-java-natives-macos:$imgui_version"))
    modImplementation(runtimeOnly("io.github.spair:imgui-java-natives-windows:$imgui_version"))

    modImplementation(rootProject.files("src/main/resources/META-INF/jars/veil-fabric-1.21.1-2.4.0.jar"))
    modImplementation(rootProject.files("src/main/resources/META-INF/jars/geckolib-fabric-1.21.1-4.8.2.jar"))
    modImplementation(rootProject.files("src/main/resources/META-INF/jars/midnightlib-1.7.5-fabric+1.21.1.jar"))
    modImplementation(rootProject.files("src/main/resources/META-INF/jars/modmenu-11.0.3.jar"))
    modImplementation(rootProject.files("src/main/resources/META-INF/jars/sound-physics-remastered-fabric-1.21.1-1.5.1.jar"))
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}


def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    repositories {
    }
}
